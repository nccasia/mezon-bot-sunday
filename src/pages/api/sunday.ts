import axios from 'axios';
import moment from 'moment';
import type { NextApiRequest, NextApiResponse } from 'next';
import { prisma } from '../../../lib/prisma';

const config = {
  variable: {
    token: '',
    tokenId: 0,
    aiModel: 'gpt-4o',
    active: true,
    rest: 10,
  },
  helpMessage: `*homnayangi/*hnag\n*hnagwith [food/branch] -> *hnagwith c∆°m\n*homnayuonggi/*hnug\n*demngaytetam\n*demngaynoel\n*demngaynhanluong\n*giatoken [quantity] [currency] -> *giatoken 1 btc\n*roll [max number] -> *roll 10\n*haha\n*hpbd\n*pick 'option 1','option 2','option3'...`,
  errors: [
    'N√£o tui ƒëang b·ªëc kh√≥i r·ªìi n√®, ƒë·ªÉ tui ngh·ªâ x√≠u r·ªìi quay l·∫°i sau nha! ƒêi u·ªëng ly cafe ƒë√£ ü•±‚òï',
    'Xin l·ªói nha, tui h∆°i m·ªát r·ªìi. ƒê·ªÉ tui ngh·ªâ ng∆°i t√≠ nh√©! üò¥',
    'Oops, tui c·∫ßn n·∫°p nƒÉng l∆∞·ª£ng. H·∫πn g·∫∑p l·∫°i sau nha! ‚ö°Ô∏è',
    'Tui ƒëang qu√° t·∫£i r·ªìi, cho tui ngh·ªâ x√≠u nha! üîã',
    'N√£o tui ƒëang tr·ªëng r·ªóng, ƒë·ªÉ tui s·∫°c pin t√≠ r·ªìi quay l·∫°i sau üîå',
    'D·∫°o n√†y kinh t·∫ø kh√≥ khƒÉn, mu·ªën h·ªèi g√¨ th√¨ t√¨m n∆°i donate ƒëi üí∏',
    'Donate cho tui ly cafe r·ªìi h·∫µng h·ªèi ti·∫øp nh√©! ‚òï',
    'Tui ƒëang c·∫ßn ti·ªÅn ƒë√≥ng ti·ªÅn nh√†, donate gi√∫p tui v·ªõi! üè†',
    'H·ªèi nhi·ªÅu qu√° r·ªìi, donate ·ªßng h·ªô t√≠ ƒëi! üí∞',
    'Mu·ªën bi·∫øt c√¢u tr·∫£ l·ªùi th√¨ donate tr∆∞·ªõc nha! üéÅ',
    'Tui ch·ªâ tr·∫£ l·ªùi nh·ªØng ng∆∞·ªùi bi·∫øt donate th√¥i! üíù',
  ],
};

const getTimeOfDay = () => {
  const hour = moment().hour();
  if (hour >= 5 && hour < 11) return 's√°ng';
  if (hour >= 11 && hour < 14) return 'tr∆∞a';
  if (hour >= 14 && hour < 18) return 'chi·ªÅu';
  return 't·ªëi';
};

const getTokens = async (): Promise<number> => {
  try {
    return await prisma.aIToken.count({ where: { expiresAt: null } });
  } catch (error) {
    console.error('L·ªói khi ƒë·∫øm token:', error);
    throw new Error('Kh√¥ng th·ªÉ ƒë·∫øm s·ªë l∆∞·ª£ng token');
  }
};

const addToken = async (token: string) => {
  await prisma.aIToken.create({ data: { token } });
  return 'Th√™m token th√†nh c√¥ng';
};

const changeModel = (model: string) => {
  config.variable.aiModel = model;
  return model;
};

const toggleBotActive = () => {
  config.variable.active = !config.variable.active;
  return config.variable.active ? 'Bot ƒë√£ b·∫≠t' : 'Bot ƒë√£ t·∫Øt';
};

const botUnActive = () =>
  config.errors[Math.floor(Math.random() * config.errors.length)];

const setUnExpiredToken = async () => {
  await prisma.aIToken.updateMany({ data: { expiresAt: null } });
  return 'ƒê√£ set token kh√¥ng h·∫øt h·∫°n';
};

export const aiTalk = async (text: string): Promise<string> => {
  if (config.variable.rest <= 0 || !config.variable.active) {
    config.variable.rest = 10;
    return botUnActive();
  }

  try {
    const response = await axios.post(
      'https://api.aimlapi.com/chat/completions',
      {
        model: config.variable.aiModel,
        messages: [{ role: 'user', content: text }],
        max_tokens: 512,
        stream: false,
      },
      {
        headers: {
          Authorization: `Bearer ${config.variable.token}`,
          'Content-Type': 'application/json',
        },
      }
    );
    config.variable.rest = config.variable.rest - 1;
    return response.data.choices[0].message.content;
  } catch (e) {
    console.log(e);

    if (config.variable.tokenId) {
      await prisma.aIToken.update({
        where: { id: config.variable.tokenId },
        data: { expiresAt: moment().startOf('day').toDate() },
      });
    }

    const newToken = await prisma.aIToken.findFirst({
      where: { expiresAt: null },
    });

    if (newToken) {
      config.variable.token = newToken.token;
      config.variable.tokenId = newToken.id;
      return aiTalk(text);
    }

    config.variable.active = false;
    return botUnActive();
  }
};

const hnagPlus = async (text: string) =>
  aiTalk(
    `Ch·ªâ ƒë∆∞a cho t√¥i t√™n:\ncho t√¥i 1 m√≥n ƒÉn ${getTimeOfDay()} v·ªõi c√°c filter ${text}`
  );

const hnugPlus = async (text: string) =>
  aiTalk(
    `Ch·ªâ ƒë∆∞a cho t√¥i t√™n:\ncho t√¥i 1 m√≥n ƒë·ªì u·ªëng ${getTimeOfDay()} v·ªõi c√°c filter ${text}`
  );
const getVariable = async () => JSON.stringify(config.variable);

const setVariable = async (variable: string) => {
  const [key, value] = variable.split('-');
  if (!key || !value) return 'Kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng';
  if (['rest'].includes(key)) {
    config.variable.rest = parseInt(value);
  }
  if (['active'].includes(key)) {
    config.variable.active = value === 'true';
  }
  if (['aiModel'].includes(key)) {
    config.variable.aiModel = value;
  }
  return 'ƒê√£ set variable';
};

const commandHandlers = {
  help: () => config.helpMessage,
  getTokens,
  addToken: (cmd: string) => addToken(cmd.replace('addToken-', '')),
  addtoken: (cmd: string) => addToken(cmd.replace('addtoken-', '')),
  hnagPlus: (cmd: string) => hnagPlus(cmd.replace('hnagPlus-', '')),
  hnagplus: (cmd: string) => hnagPlus(cmd.replace('hnagplus-', '')),
  hnugPlus: (cmd: string) => hnugPlus(cmd.replace('hnugPlus-', '')),
  hnugplus: (cmd: string) => hnugPlus(cmd.replace('hnugplus-', '')),
  changeModel: (cmd: string) => changeModel(cmd.replace('changeModel-', '')),
  changemodel: (cmd: string) => changeModel(cmd.replace('changemodel-', '')),
  hey: (cmd: string) => aiTalk(cmd.replace('hey-', '')),
  lmn: (cmd: string) => aiTalk(cmd.replace('lmn-', '')),
  lmk: (cmd: string) => aiTalk(cmd.replace('lmk-', '')),
  toggleBotActive,
  setUnExpiredToken,
  getVariable,
  setVariable: (cmd: string) => setVariable(cmd.replace('setVariable-', '')),
};

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  console.log('req.method', req.method);

  if (req.method !== 'POST') {
    return res.status(405).json('Method not allowed');
  }

  const { command } = req.body;
  if (!command) return res.status(400).json('Please try *sunday [command]');

  for (const [key, handler] of Object.entries(commandHandlers)) {
    if (command.startsWith(key)) {
      return res.status(200).json(await handler(command));
    }
  }
  return res
    .status(200)
    .json('Command ch∆∞a ƒë∆∞·ª£c c·∫≠p nh·∫≠t, xin vui l√≤ng th·ª≠ l·∫°i.');
}
