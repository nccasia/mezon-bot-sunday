import moment from 'moment';
import type { NextApiRequest, NextApiResponse } from 'next';
import { prisma } from '../../../lib/prisma';
import { random } from '@/utils/utils';

const messages: string[] = [
  'üåû Ch·ªâ c√≤n {days} ng√†y n·ªØa l√† l∆∞∆°ng s·∫Ω v·ªÅ, s·∫µn s√†ng ƒë√≥n nƒÉng l∆∞·ª£ng m·ªõi nh√©!',
  'üéâ Ch·ªù ƒë·ª£i ƒë√£ xong! L∆∞∆°ng ch·ªâ c√≤n {days} ng√†y n·ªØa th√¥i, chu·∫©n b·ªã l√™n k·∫ø ho·∫°ch chi ti√™u n√†o!',
  'üå∑ ƒê·∫øm ng∆∞·ª£c n√†o, {days} ng√†y n·ªØa l√† ƒë·∫øn ng√†y l∆∞∆°ng r·ªìi, chu·∫©n b·ªã cho m·ªçi d·ª± ƒë·ªãnh nh√©!',
  'üéä Th·ªùi gian ch·ªù ƒë·ª£i kh√¥ng l√¢u n·ªØa, ch·ªâ c√≤n {days} ng√†y l√† c√≥ l∆∞∆°ng, tha h·ªì t·∫≠n h∆∞·ªüng!',
  'üåª L∆∞∆°ng ch·ªâ c√≤n {days} ng√†y n·ªØa l√† ƒë·∫øn, chu·∫©n b·ªã cho th√°ng m·ªõi r·ª±c r·ª° th√¥i!',
  'üåû Th·ªùi gian ƒë·∫øm ng∆∞·ª£c b·∫Øt ƒë·∫ßu! Ch·ªâ c√≤n {days} ng√†y n·ªØa l√† l∆∞∆°ng v·ªÅ.',
  'üå¥ H√£y vui l√™n, l∆∞∆°ng ch·ªâ c√≤n {days} ng√†y n·ªØa l√† v·ªÅ r·ªìi, tha h·ªì t·∫≠n h∆∞·ªüng cu·ªôc s·ªëng!',
  'üçÇ Ng√†y ch·ªù ƒë·ª£i ƒë√£ g·∫ßn k·ªÅ, ch·ªâ c√≤n {days} ng√†y n·ªØa l√† ƒë·∫øn ng√†y nh·∫≠n l∆∞∆°ng!',
  'üéà Tin vui ƒë√¢y! Ch·ªâ c√≤n {days} ng√†y n·ªØa l√† ƒë·∫øn ng√†y l∆∞∆°ng, b·∫°n ƒë√£ s·∫µn s√†ng ch∆∞a?',
  'üéÉ ƒê·∫øm ng∆∞·ª£c th√¥i! Ch·ªâ c√≤n {days} ng√†y l√† l∆∞∆°ng v·ªÅ r·ªìi, chu·∫©n b·ªã chi ti√™u h·ª£p l√Ω nh√©!',
  'üí∏ C√≤n {days} ng√†y n·ªØa l√† c√≥ ti·ªÅn tr·∫£ n·ª£ r·ªìi! Ch·ªß n·ª£ ∆°i, em s·∫Øp c√≥ ti·ªÅn r·ªìi!',
  'ü§ë {days} ng√†y n·ªØa th√¥i l√† ƒë∆∞·ª£c ƒÉn m√¨ g√≥i cao c·∫•p r·ªìi c√°c b·∫°n ∆°i!',
  'üé∞ Ch·ªâ c√≤n {days} ng√†y n·ªØa l√† c√≥ ti·ªÅn all-in Crypto r·ªìi! To the moon! üöÄ',
  'üéÆ {days} ng√†y n·ªØa l√† c√≥ l∆∞∆°ng r·ªìi! C√≤n ƒë·ªß ti·ªÅn n·∫°p game kh√¥ng c√°c b·∫°n?',
  'üçú B√°o c√°o s·∫øp, c√≤n {days} ng√†y n·ªØa m·ªõi c√≥ l∆∞∆°ng, cho em ·ª©ng 500k ƒÉn m√¨ t√¥m!',
  'üèÉ Ch·∫°y deadline c·∫≠t l·ª±c v√¨ c√≤n {days} ng√†y n·ªØa m·ªõi c√≥ l∆∞∆°ng! S·∫øp ∆°i em ƒë√≥i qu√°!',
  'üí∞ {days} ng√†y n·ªØa l√† c√≥ ti·ªÅn tr·∫£ g√≥p iPhone 15 r·ªìi! ƒÇn m√¨ g√≥i c·∫£ th√°ng kh√¥ng sao!',
  'üéµ C√≤n {days} ng√†y n·ªØa th√¥i! L∆∞∆°ng v·ªÅ l√† anh ƒë∆∞a em ƒëi tr·ªën... n·ª£!',
  'üåô {days} ng√†y n·ªØa l√† l∆∞∆°ng v·ªÅ! Nh∆∞ng m√† v·ªÅ th·∫≥ng v√≠ ch·ªß n·ª£ m·∫•t r·ªìi!',
  'üé™ C√≤n {days} ng√†y n·ªØa! L∆∞∆°ng ch∆∞a v·ªÅ m√† bill v·ªÅ ƒë·∫ßy nh√†!',
];

const messageReceivedSalarys = [
  'üéâ T√¥i v·ª´a nh·∫≠n l∆∞∆°ng! T√¥i d√πng ƒë·ªÉ tr·∫£ n·ª£ h·∫øt r·ªìi, c√≤n b·∫°n th√¨ sao?',
  'üí∏ T√¥i ƒë√£ c√≥ l∆∞∆°ng! T√¥i all-in v√†o tr·∫£ n·ª£, c√≤n b·∫°n th√¨ sao?',
  'üéÆ T√¥i c√≥ l∆∞∆°ng r·ªìi! T√¥i n·∫°p h·∫øt v√†o game, c√≤n b·∫°n th√¨ sao?',
  'üõçÔ∏è T√¥i nh·∫≠n l∆∞∆°ng xong! T√¥i mua s·∫Øm Shopee ng·∫≠p m·∫∑t, c√≤n b·∫°n th√¨ sao?',
  'üèÉ T√¥i l√£nh l∆∞∆°ng r·ªìi! T√¥i gi·∫•u v·ª£/ch·ªìng ƒë·ªÉ ti√™u, c√≤n b·∫°n th√¨ sao?',
  'üé∞ T√¥i c√≥ l∆∞∆°ng! T√¥i all-in Crypto lu√¥n, c√≤n b·∫°n th√¨ sao?',
  'üí≥ T√¥i nh·∫≠n l∆∞∆°ng! T√¥i tr·∫£ g√≥p iPhone m·ªõi, c√≤n b·∫°n th√¨ sao?',
  'üçú T√¥i c√≥ l∆∞∆°ng r·ªìi! T√¥i ƒÉn nh√† h√†ng x·ªãn, c√≤n b·∫°n th√¨ sao?',
  'üì± T√¥i l√£nh l∆∞∆°ng! T√¥i ƒë·ªïi ƒëi·ªán tho·∫°i m·ªõi, c√≤n b·∫°n v·∫´n x√†i m√°y c≈©?',
  'üéµ T√¥i nh·∫≠n l∆∞∆°ng! T√¥i ƒëi du l·ªãch h·∫øt, c√≤n b·∫°n v·∫´n ƒëang work from home?',
  'üåô T√¥i c√≥ l∆∞∆°ng! T√¥i ƒë·ªÉ d√†nh h·∫øt, c√≤n b·∫°n ti√™u s·∫°ch r·ªìi √†?',
  'üé™ T√¥i nh·∫≠n l∆∞∆°ng! T√¥i tr·∫£ h·∫øt ho√° ƒë∆°n, c√≤n b·∫°n v·∫´n ƒëang n·ª£ bill?',
  'üñ•Ô∏è T√¥i c√≥ l∆∞∆°ng r·ªìi! T√¥i ƒëi mua Mac Mini M4 m·ªõi ra, c√≤n b·∫°n th√¨ sao?',
];

const messageNoSalary = [
  'üò≠ L∆∞∆°ng ch∆∞a v·ªÅ, ƒëang ph·∫£i ƒÉn m√¨ g√≥i c·ªßa th√°ng tr∆∞·ªõc ƒë·ªÉ d√†nh',
  'üèÉ Kh√¥ng c√≥ l∆∞∆°ng, ph·∫£i ch·∫°y deadline c·∫≠t l·ª±c ki·∫øm th√™m gi·ªù',
  'üçú B√°o c√°o: H√¥m nay v·∫´n ch∆∞a c√≥ l∆∞∆°ng, ƒëang ƒÉn c∆°m v·ªõi mu·ªëi',
  'üí≥ L∆∞∆°ng ch∆∞a v·ªÅ nh∆∞ng bill th·∫ª t√≠n d·ª•ng th√¨ v·ªÅ ƒë·ªÅu ƒë·∫∑n qu√°',
  'üåô L∆∞∆°ng ∆°i l√† l∆∞∆°ng, sao m√†y kh√¥ng v·ªÅ v·ªõi tao?',
  'üí∞ Kh√¥ng c√≥ l∆∞∆°ng, ƒëang ph·∫£i b√°n th·∫≠n tr·∫£ n·ª£',
  'üñ•Ô∏è Kh√¥ng c√≥ l∆∞∆°ng nh∆∞ng v·∫´n m∆° v·ªÅ MacBook M4 Max',
];

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== 'GET') {
    return res.status(405).json({ message: 'Method not allowed' });
  }

  const today = moment().startOf('day');
  
  // L·∫•y th√¥ng tin l∆∞∆°ng th√°ng n√†y
  let currentSalary = await prisma.salary.findFirst({
    where: {
      applyMonth: today.format('YYYY-MM-01'),
    },
  });

  if (!currentSalary) {
    currentSalary = await prisma.salary.create({
      data: {
        applyMonth: today.format('YYYY-MM-01'),
        dateE: today.clone().add(1, 'months').date(5).toDate().toISOString(),
      },
    });
  }


  // L·∫•y th√¥ng tin l∆∞∆°ng th√°ng tr∆∞·ªõc
  const lastSalary = await prisma.salary.findFirst({
    where: {
      applyMonth: today.clone().subtract(1, 'months').format('YYYY-MM-01'),
    },
  });

  // N·∫øu ƒë√£ c√≥ ng√†y nh·∫≠n l∆∞∆°ng th·ª±c t·∫ø c·ªßa th√°ng tr∆∞·ªõc v√† h√¥m nay >= ng√†y nh·∫≠n l∆∞∆°ng th·ª±c t·∫ø
  if (lastSalary?.dateA && moment(lastSalary.dateA).startOf('day').isSameOrBefore(today)) {
    return res.status(200).json(random(messageReceivedSalarys));
  }

  // N·∫øu th√°ng tr∆∞·ªõc c√≥ ng√†y d·ª± ki·∫øn v√† ch∆∞a c√≥ ng√†y th·ª±c t·∫ø
  if (lastSalary?.dateE && !lastSalary.dateA) {
    const expectedDate = moment(lastSalary.dateE).startOf('day');
    if (expectedDate.isAfter(today)) {
      const daysUntilSalary = expectedDate.diff(today, 'days');
      return res.status(200).json(
        random(messages).replace('{days}', (daysUntilSalary + 1).toString())
      );
    }
  }

  // Ki·ªÉm tra ng√†y d·ª± ki·∫øn c·ªßa th√°ng n√†y
  if (currentSalary.dateE) {
    const expectedDate = moment(currentSalary.dateE).startOf('day');
    if (expectedDate.isAfter(today)) {
      const daysUntilSalary = expectedDate.diff(today, 'days');
      return res.status(200).json(
        random(messages).replace('{days}', (daysUntilSalary + 1).toString())
      );
    }
  }

  // N·∫øu kh√¥ng c√≥ th√¥ng tin ho·∫∑c ƒë√£ qu√° ng√†y d·ª± ki·∫øn
  return res.status(200).json(random(messageNoSalary));
}
